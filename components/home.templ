package components

import (
	"fmt"
	"github.com/ngsalvo/roadmapsh-unit-converter/services"
	"strings"
)

var FirstSelection = map[services.UnitType]map[services.Unit]string{
	services.Temperature: {
		services.Celsius:    "celsius",
		services.Fahrenheit: "fahrenheit",
		services.Kelvin:     "kelvin",
	},
	services.Length: {
		services.Meters:     "meters",
		services.Kilometers: "kilometers",
		services.Feet:       "feet",
		services.Yards:      "yards",
		services.Miles:      "miles",
	},
	services.Weight: {
		services.Milligrams: "milligrams",
		services.Grams:      "grams",
		services.Kilograms:  "kilograms",
		services.Ounces:     "ounces",
		services.Pounds:     "pounds",
	},
}

templ Home() {
	@page("Unit Converter") {
		<div class="flex flex-col h-screen items-center justify-center">
			@title()
			@TabNav(&Store{UnitType: "length", UnitToConvertFrom: "meters", UnitToConvertTo: "miles"}, TabForm("length"))
		</div>
	}
}

templ page(title string) {
	<!DOCTYPE html>
	<html lang="en" class="h-screen max-h-screen bg-ctp-base">
		@head(title)
		<body class="h-screen isolate bg-background text-text">
			<div class="w-full h-full overflow-y-scroll">
				<main>
					{ children... }
				</main>
			</div>
		</body>
	</html>
}

templ head(title string) {
	<head>
		<meta charset="UTF-8"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
		<script type="module" defer src="https://cdn.jsdelivr.net/npm/@sudodevnull/datastar"></script>
		<title>{ title }</title>
		<link rel="shortcut icon" href="static/images/favicon.ico" type="image/x-icon"/>
		<link rel="stylesheet" href="/static/styles/style.css"/>
		<link rel="preconnect" href="https://fonts.googleapi.com"/>
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin/>
	</head>
}

templ title() {
	<h1 class="text-center font-bold text-4xl md:text-6xl uppercase bg-gradient-to-r from-text to-primary text-transparent bg-clip-text tracking-wider mb-2">Unit Converter</h1>
}

type Tab struct {
	Text     string
	UnitType string
	Active   bool
}

type Tabs []Tab

var tabs = Tabs{
	{Text: "Length", UnitType: "length", Active: true},
	{Text: "Weight", UnitType: "weight", Active: false},
	{Text: "Temperature", UnitType: "temperature", Active: false},
}

type Store struct {
	UnitType          string  `json:"unitType"`
	UnitToConvertFrom string  `json:"unitToConvertFrom"`
	UnitToConvertTo   string  `json:"unitToConvertTo"`
	ValueToConvert    float64 `json:"valueToConvert"`
}

templ TabNav(store *Store, tabContent templ.Component) {
	<div id="tabs" data-store={ templ.JSONString(store) } class="h-[334px]">
		<div role="tablist" class="flex justify-center">
			for _, tab := range tabs {
				<button role="tab" class={ "mr-6" ,templ.KV("text-secondary", tab.UnitType == store.UnitType) } data-on-click={ fmt.Sprintf("$unitType='%s';$$get('/tabs/update')", tab.UnitType) }>{ tab.Text }</button>
			}
		</div>
		<div id="tab-content">
			@tabContent
		</div>
	</div>
}

type Form struct {
	Value             float64 `json:"valueToConvert"`
	UnitToConvertFrom string  `json:"unitToConvertFrom"`
	UnitToConverTo    string  `json:"unitToConvertTo"`
}

templ TabForm(unitType string) {
	<div id="tab-form" data-store='{"valueToConvert": 0, "unitToConvertFrom": "meters", "unitToConvertTo": "miles"}'>
		<div class="mb-4 mt-4">
			<label class="block text-gray-700 text-sm font-bold mb-2" for="valueToConvert">
				Enter the value to convert
			</label>
			<input class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:border-accent" data-model="valueToConvert" type="number" step="0.1"/>
		</div>
		<div class="mb-3">
			<label class="block text-gray-700 text-sm font-bold mb-2" for="unitToConvertFrom">
				Unit to Convert from
			</label>
			<select class="block appearance-none w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 pr-8 rounded shadow leading-tight focus:border-accent" data-model="unitToConvertFrom">
				for _, elementBeingCompared := range FirstSelection[services.UnitType(strings.ToLower(unitType))] {
					<option value={ elementBeingCompared }>{ elementBeingCompared }</option>
				}
			</select>
		</div>
		<div class="mb-6">
			<label class="block text-gray-700 text-sm font-bold mb-2" for="unitToConvertTo">
				Unit to Convert to
			</label>
			<select class="block appearance-none w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 pr-8 rounded shadow leading-tight focus:border-accent" data-model="unitToConvertTo">
				for _, elementBeingCompared := range FirstSelection[services.UnitType(strings.ToLower(unitType))] {
					<option value={ elementBeingCompared }>{ elementBeingCompared }</option>
				}
			</select>
		</div>
		<button type="button" data-on-click="$$post('/result')" class="bg-primary px-10 py-2 text-xl font-semibold text-background rounded hover:brightness-90 shadow shadow-primary/10">
			Convert
		</button>
	</div>
}

func parseURL(unitType string) string {
	return fmt.Sprintf("/result?unitType=%s", unitType)
}
